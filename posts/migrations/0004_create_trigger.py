# Generated by Django 3.0.8 on 2020-10-23 05:53

from django.db import migrations


class Migration(migrations.Migration):

    dependencies = [
        ('posts', '0003_auto_20201022_1412'),
    ]

    operations = [
        migrations.RunSQL(
            sql='''
            CREATE OR REPLACE FUNCTION insert_post()
            RETURNS TRIGGER
            LANGUAGE plpgsql AS $$
            DECLARE tm timestamptz;
            BEGIN
              SELECT last_post_created_on INTO tm FROM threads_thread
                WHERE id = NEW.thread_id;
                IF tm IS NULL THEN
                  UPDATE threads_thread SET
                  last_post_created_on = NEW.created_on 
                  WHERE id = NEW.thread_id;
                ELSEIF tm < NEW.created_on THEN
                  UPDATE threads_thread SET
                  last_post_created_on = NEW.created_on 
                  WHERE id = NEW.thread_id;
                END IF;

              RETURN NEW;
            END;
            $$;

            CREATE OR REPLACE FUNCTION update_post()
            RETURNS TRIGGER
            LANGUAGE plpgsql AS $$
            DECLARE tm timestamptz;
            BEGIN
              IF (OLD.thread_id <> NEW.thread_id) THEN
                -- NEW.thread_id 
                SELECT last_post_created_on INTO tm FROM threads_thread
                WHERE id = NEW.thread_id;
                IF tm IS NULL THEN
                  UPDATE threads_thread SET
                  last_post_created_on = NEW.created_on 
                  WHERE id = NEW.thread_id;
                ELSEIF tm < NEW.created_on THEN
                  UPDATE threads_thread SET
                  last_post_created_on = NEW.created_on 
                  WHERE id = NEW.thread_id;
                END IF;
                

                -- OLD.thread_id
                SELECT MAX(created_on) INTO tm FROM posts_post
                WHERE thread_id = OLD.thread_id;
                
                IF tm IS NULL THEN
                    UPDATE threads_thread SET last_post_created_on = NULL
                    WHERE id = OLD.thread_id;
                ELSE
                    UPDATE threads_thread SET last_post_created_on = tm
                    WHERE id = OLD.thread_id;
                END IF;
              END IF;
              
              RETURN NEW;
            END;
            $$;

            CREATE OR REPLACE FUNCTION delete_post()
            RETURNS TRIGGER
            LANGUAGE plpgsql AS $$
            DECLARE tm timestamptz;
            BEGIN
              SELECT MAX(created_on) INTO tm FROM posts_post
                WHERE thread_id = OLD.thread_id;
                
                IF tm IS NULL THEN
                    UPDATE threads_thread SET last_post_created_on = NULL
                    WHERE id = OLD.thread_id;
                ELSE
                    UPDATE threads_thread SET last_post_created_on = tm
                    WHERE id = OLD.thread_id;
                END IF;

                RETURN OLD;
            END;
            $$;

            CREATE TRIGGER post_insert_trigger
            AFTER INSERT ON posts_post
            FOR EACH ROW EXECUTE PROCEDURE insert_post();

            CREATE TRIGGER post_update_trigger
            AFTER UPDATE OF thread_id ON posts_post
            FOR EACH ROW EXECUTE PROCEDURE update_post();

            CREATE TRIGGER post_delete_trigger
            AFTER DELETE ON posts_post
            FOR EACH ROW EXECUTE PROCEDURE delete_post();
            ''',
            reverse_sql='''
            DROP TRIGGER IF EXISTS post_insert_trigger
            ON posts_post;

            DROP TRIGGER IF EXISTS post_update_trigger
            ON posts_post;

            DROP TRIGGER IF EXISTS post_delete_trigger
            ON posts_post;

            DROP FUNCTION IF EXISTS insert_post();
            DROP FUNCTION IF EXISTS update_post();
            DROP FUNCTION IF EXISTS delete_post();
            '''
        )
    ]
